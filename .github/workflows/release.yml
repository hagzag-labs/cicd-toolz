# This is a basic workflow to help you get started with Actions

name: release-flow

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  release:
    # The type of runner that the job will run on
#     runs-on: ubuntu-latest
    runs-on: [self-hosted]
    timeout-minutes: 10
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install semantic releae dependencies
        run: |
          npm install -g semantic-release
          npm install -g @semantic-release/git @semantic-release/github \
                         @semantic-release/changelog @semantic-release/commit-analyzer \
                         @semantic-release/release-notes-generator @semantic-release/exec

      - name: Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      - name: setup and execute semantic-release
        id: nextrealease
        run: |
          cat <<EOF>> .releaserc.yml
          branches:
          - main
          plugins:
          - "@semantic-release/commit-analyzer"
          - "@semantic-release/release-notes-generator"
          - "@semantic-release/github"
          #- - "@semantic-release/exec"
          #  - verifyReleaseCmd: echo \${nextVersion.version} > nextVersion
          # - verifyReleaseCmd: echo \${nextMajor.version} > nextMajor
          # - verifyReleaseCmd: echo \${nextMinor.version} > nextMinor
          # - verifyReleaseCmd: echo \${nextPatch.version} > nextPatch
          EOF
          semantic-release -r ${{ github.server_url }}/${{ github.repository }}.git
          #test -f nextVersion && echo "SRTAG=v$(cat nextVersion)" >> ${GITHUB_OUTPUT}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: echo nextVerson
        run: |
          echo $SR_TAG
          echo ${{ steps.semantic_release.outputs.nextVersion }}
          echo ${{ steps.semantic_release.outputs.nextMajor }}
          echo ${{ steps.semantic_release.outputs.nextMinor }}          
          echo ${{ steps.semantic_release.outputs.nextPatch }}
        env:
          SRTAG: ${{ steps.semantic_release.outputs.nextVersion }}

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
#           images: |
#             ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#             ghcr.io/
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern=${{ steps.semantic_release.outputs.nextVersion }}
            type=semver,pattern=${{ steps.semantic_release.outputs.nextMajor }}.{{ steps.semantic_release.outputs.nextMinor }}


  #     # For meta verification
  #     - name: List Docker tag
  #       run: echo "${{ steps.meta.outputs.tags }}"

      # add image caching 
      - uses: satackey/action-docker-layer-caching@v0.0.11
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true

      # Build and push Docker image with Buildx (don't push on PR's)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
