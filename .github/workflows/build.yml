# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
#     runs-on: ubuntu-latest
    runs-on: [self-hosted] 
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install semantic releae dependencies
        run: |
          npm install -g semantic-release
          npm install -g @semantic-release/git @semantic-release/github @semantic-release/changelog @semantic-release/commit-analyzer @semantic-release/release-notes-generator @semantic-release/exec
      
      - name: generate .releaserc.yml
        id: nextrealease
        run: |
          cat <<EOF>> .releaserc.yml
          branches:
          - main
          plugins:
          - "@semantic-release/commit-analyzer"
          - "@semantic-release/release-notes-generator"
          - "@semantic-release/github"
          - - "@semantic-release/exec"
            - verifyReleaseCmd: echo \${nextRelease.version} > nextVersion
          EOF
          semantic-release
          cat nextVersion
      # Runs a set of commands using the runners shell
#       - name: run semantic-release
#         run: |
#           semantic-release -r ${{ github.server_url }}/${{ github.repository }}.git
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#       - name: Get npm cache directory
#         id: npm-cache-dir
#         shell: bash
#         run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

#       - uses: actions/cache@v3
#         id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
#         with:
#           path: ${{ steps.npm-cache-dir.outputs.dir }}
#           key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
#           restore-keys: |
#             ${{ runner.os }}-node-


